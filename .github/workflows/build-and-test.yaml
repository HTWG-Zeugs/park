name: Build and Test

on:
  pull_request:
    branches:
      - main
      - dev

permissions:
  id-token: write 
  contents: read 
  pull-requests: write

env:
  TAG_ID: ${{ github.sha }}
  TERRAFORM_PLAN_ENVIRONMENT: staging

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - { name: "property-management", dockerfile: "./property-management.Dockerfile" }
          - { name: "parking-management", dockerfile: "./parking-management.Dockerfile" }
          - { name: "authentication-service", dockerfile: "./authentication-service.Dockerfile" }
          - { name: "infrastructure-administration", dockerfile: "./infrastructure-administration.Dockerfile" }
          - { name: "frontend", dockerfile: "./frontend.Dockerfile" }
          - { name: "signup-frontend", dockerfile: "./signup-frontend.Dockerfile" }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build \
            -f ${{ matrix.service.dockerfile }} \
            . \
            --platform linux/amd64

  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [
          backend/property-management,
          backend/parking-management
        ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        npm ci

    - name: Run tests
      run: |
        cd ${{ matrix.service }}
        npm test --if-present

  plan-terraform-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          service_account: 'github-sa@${{ vars.STAGING_PROJECT_ID }}.iam.gserviceaccount.com'
          workload_identity_provider: '${{ secrets.STAGING_WORKLOAD_IDENTITY_PROVIDER }}'
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - uses: hashicorp/setup-terraform@v3
      - name: Run Terraform plan for infrastructure
        working-directory: ./ci-cd/terraform/${{ env.TERRAFORM_PLAN_ENVIRONMENT}}-infra
        run: |
          terraform init
          terraform plan \
            -var="is_github_actions=true" \
            -var="project_id=${{ vars.STAGING_PROJECT_ID }}" \
            -var="region=${{ vars.STAGING_REGION }}"

  plan-terraform-application:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          service_account: 'github-sa@${{ vars.STAGING_PROJECT_ID }}.iam.gserviceaccount.com'
          workload_identity_provider: '${{ secrets.STAGING_WORKLOAD_IDENTITY_PROVIDER }}'
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Fetch enterprise-tenants.json or default to []
        run: |
          BUCKET_NAME="${{ vars.STAGING_PROJECT_ID }}-terraform-state"
          OBJECT_PATH="enterprise-tenants.json"
          
          # Default
          CONTENT="[]"

          # If the file exists, read its contents; otherwise use default "[]"
          gsutil stat "gs://${BUCKET_NAME}/${OBJECT_PATH}"
          status=$?
          if [[ $status == 0 ]]; then
            echo "✔ enterprise-tenants.json found; fetching from GCS..."
            CONTENT=$(gsutil cat "gs://${BUCKET_NAME}/${OBJECT_PATH}")
            
            # Optionally, verify that it is valid JSON 
            echo "$CONTENT" | jq empty 2>/dev/null || CONTENT="[]"
          else
            echo "✖ enterprise-tenants.json not found. Using empty array."
          fi

          echo "ENTERPRISE_TENANTS_JSON=$CONTENT" >> $GITHUB_ENV
      
      - uses: hashicorp/setup-terraform@v3
      - name: Run Terraform plan for application
        working-directory: ./ci-cd/terraform/${{ env.TERRAFORM_PLAN_ENVIRONMENT}}
        run: |
          terraform init
          terraform plan \
            -var="is_github_actions=true" \
            -var="project_id=${{ vars.STAGING_PROJECT_ID }}" \
            -var="region=${{ vars.STAGING_REGION }}" \
            -var="domain_name=${{ vars.STAGING_DOMAIN }}" \
            -var="enterprise_tenants_json=$ENTERPRISE_TENANTS_JSON"